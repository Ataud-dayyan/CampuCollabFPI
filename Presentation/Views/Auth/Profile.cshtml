@model Presentation.Models.ProfileViewModel
@{
    ViewData["Title"] = "Account Profile";
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<link href="~/css/Profile.css" rel="stylesheet" />
<div class="profile-container">
    <div class="profile-header">
        <h1 class="profile-title">Account Profile</h1>
        <p class="profile-subtitle">Manage your account information and personalization</p>
    </div>

    <div class="profile-info">
        <div class="info-grid">
            <div class="info-item">
                <div class="info-icon">
                    <i class="fas fa-user"></i>
                </div>
                <div class="info-content">
                    <div class="info-label">Username</div>
                    <div class="info-value d-flex align-items-center">
                        @Model.UserName
                        <button type="button" class="btn btn-link btn-sm ms-2" data-bs-toggle="modal" data-bs-target="#editUsernameModal">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="info-item">
                <div class="info-icon">
                    <i class="fas fa-envelope"></i>
                </div>
                <div class="info-content">
                    <div class="info-label">Email Address</div>
                    <div class="info-value">@Model.Email</div>
                </div>
            </div>

            @if (User.IsInRole("Student"))
            {
                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-id-card"></i>
                    </div>
                    <div class="info-content">
                        <div class="info-label">Matric Number</div>
                        <div class="info-value">@Model.StudentId</div>
                    </div>
                </div>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="info-content">
                        <div class="info-label">Current Group</div>
                        <div class="info-value">@Model.CurrentGroupName</div>
                    </div>
                </div>
            }

            <div class="info-item">
                <div class="info-icon">
                    <i class="fas fa-image"></i>
                </div>
                <div class="info-content">
                    <div class="info-label">Selected Avatar</div>
                    <div class="info-value">
                        @if (!string.IsNullOrEmpty(Model.SelectedAvatar))
                        {
                            <div class="current-avatar">
                                <img src="~/images/avatars/@Model.SelectedAvatar" alt="Current Avatar">
                                <span>Avatar Selected</span>
                            </div>
                        }
                        else
                        {
                            <span class="no-avatar">No avatar selected</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="avatar-section">
        <h2 class="section-title">
            <i class="fas fa-palette"></i>
            Choose Your Avatar
        </h2>

        <form asp-action="UpdateAvatar" method="post" id="avatarForm">
            <div class="avatar-grid">
                @foreach (var avatar in Model.AvatarOptions)
                {
                    var avatarId = $"avatar_{avatar.GetHashCode()}";
                    var isSelected = Model.SelectedAvatar == avatar;

                    <label class="avatar-option" for="@avatarId" title="@avatar">
                        <input type="radio"
                               id="@avatarId"
                               name="selectedAvatar"
                               value="@avatar"
                               class="avatar-radio"
                               @(isSelected ? "checked" : "") />
                        <img src="~/images/avatars/@avatar"
                             class="avatar-img @(isSelected ? "selected" : "")"
                             alt="@avatar" />
                        @if (isSelected)
                        {
                            <span class="checkmark">&#10004;</span>
                        }
                    </label>
                }
            </div>

            <button type="submit" class="update-btn">
                <i class="fas fa-save"></i> Update Avatar
            </button>
        </form>
    </div>
</div>

<!-- Edit Username Modal -->
<div class="modal fade" id="editUsernameModal" tabindex="-1" aria-labelledby="editUsernameModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="UpdateUsername" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUsernameModalLabel">Edit Username</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-3">
                        <label for="NewUsername" class="form-label">New Username</label>
                        <input type="text" class="form-control" name="NewUsername" id="NewUsername" value="@Model.UserName" required />
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const avatarOptions = document.querySelectorAll('.avatar-option');
            const avatarImages = document.querySelectorAll('.avatar-img');
            const form = document.getElementById('avatarForm');

            // Handle avatar selection
            avatarOptions.forEach(option => {
                const img = option.querySelector('.avatar-img');
                const input = option.querySelector('.avatar-radio');

                option.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Remove selected class from all images
                    avatarImages.forEach(img => {
                        img.classList.remove('selected');
                        const checkmark = img.parentElement.querySelector('.checkmark');
                        if (checkmark) {
                            checkmark.remove();
                        }
                    });

                    // Add selected class to clicked image
                    img.classList.add('selected');
                    input.checked = true;

                    // Add checkmark with animation
                    const checkmark = document.createElement('span');
                    checkmark.className = 'checkmark';
                    checkmark.innerHTML = '&#10004;';
                    option.appendChild(checkmark);

                    // Add pulse animation to update button
                    const updateBtn = document.querySelector('.update-btn');
                    updateBtn.classList.add('pulse-animation');
                    setTimeout(() => {
                        updateBtn.classList.remove('pulse-animation');
                    }, 2000);
                });
            });

            // Handle form submission with loading state
            form.addEventListener('submit', function(e) {
                const btn = document.querySelector('.update-btn');
                const originalText = btn.innerHTML;

                btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
                btn.disabled = true;

                // Re-enable button after a short delay if form submission fails
                setTimeout(() => {
                    if (btn.disabled) {
                        btn.innerHTML = originalText;
                        btn.disabled = false;
                    }
                }, 5000);
            });

            // Add hover effects for better interactivity
            avatarImages.forEach(img => {
                img.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('selected')) {
                        this.style.transform = 'scale(1.05)';
                    }
                });

                img.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('selected')) {
                        this.style.transform = 'scale(1)';
                    }
                });
            });

            // Add smooth scrolling to avatar section when page loads with validation errors
            @if (!ViewData.ModelState.IsValid)
            {
                        <text>
                        setTimeout(() => {
                            document.querySelector('.avatar-section').scrollIntoView({
                                behavior: 'smooth',
                                block: 'center'
                            });
                        }, 500);
                        </text>
            }
        });
    </script>
}